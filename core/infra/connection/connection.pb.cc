// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace connection_object {

namespace {

const ::google::protobuf::Descriptor* Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Asset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Domain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Domain_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxSignatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxSignatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_connection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_connection_2eproto() {
  protobuf_AddDesc_connection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "connection.proto");
  GOOGLE_CHECK(file != NULL);
  Asset_descriptor_ = file->message_type(0);
  static const int Asset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, precision_),
  };
  Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Asset_descriptor_,
      Asset::default_instance_,
      Asset_offsets_,
      -1,
      -1,
      -1,
      sizeof(Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _is_default_instance_));
  Domain_descriptor_ = file->message_type(1);
  static const int Domain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, ownerpublickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, name_),
  };
  Domain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Domain_descriptor_,
      Domain::default_instance_,
      Domain_offsets_,
      -1,
      -1,
      -1,
      sizeof(Domain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _is_default_instance_));
  TxSignatures_descriptor_ = file->message_type(2);
  static const int TxSignatures_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, signature_),
  };
  TxSignatures_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxSignatures_descriptor_,
      TxSignatures::default_instance_,
      TxSignatures_offsets_,
      -1,
      -1,
      -1,
      sizeof(TxSignatures),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, _is_default_instance_));
  EventSignature_descriptor_ = file->message_type(3);
  static const int EventSignature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, signature_),
  };
  EventSignature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventSignature_descriptor_,
      EventSignature::default_instance_,
      EventSignature_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventSignature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, _is_default_instance_));
  Transaction_descriptor_ = file->message_type(4);
  static const int Transaction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, txsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, senderpubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, receivepubkey_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _is_default_instance_));
  ConsensusEvent_descriptor_ = file->message_type(5);
  static const int ConsensusEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, eventsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, transaction_),
  };
  ConsensusEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConsensusEvent_descriptor_,
      ConsensusEvent::default_instance_,
      ConsensusEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConsensusEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, _is_default_instance_));
  StatusResponse_descriptor_ = file->message_type(6);
  static const int StatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, value_),
  };
  StatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_connection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Asset_descriptor_, &Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Domain_descriptor_, &Domain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxSignatures_descriptor_, &TxSignatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventSignature_descriptor_, &EventSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConsensusEvent_descriptor_, &ConsensusEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, &StatusResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connection_2eproto() {
  delete Asset::default_instance_;
  delete Asset_reflection_;
  delete Domain::default_instance_;
  delete Domain_reflection_;
  delete TxSignatures::default_instance_;
  delete TxSignatures_reflection_;
  delete EventSignature::default_instance_;
  delete EventSignature_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete ConsensusEvent::default_instance_;
  delete ConsensusEvent_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
}

void protobuf_AddDesc_connection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_connection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020connection.proto\022\021connection_object\"G\n"
    "\005Asset\022\016\n\006domain\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005"
    "value\030\003 \001(\004\022\021\n\tprecision\030\004 \001(\004\".\n\006Domain"
    "\022\026\n\016ownerPublicKey\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"4"
    "\n\014TxSignatures\022\021\n\tpublicKey\030\001 \001(\t\022\021\n\tsig"
    "nature\030\002 \001(\t\"6\n\016EventSignature\022\021\n\tpublic"
    "Key\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\t\"\341\001\n\013Transac"
    "tion\0225\n\014txSignatures\030\001 \003(\0132\037.connection_"
    "object.TxSignatures\022\014\n\004type\030\002 \001(\t\022\024\n\014sen"
    "derPubkey\030\004 \001(\t\022\014\n\004hash\030\005 \001(\t\022\'\n\005asset\030\006"
    " \001(\0132\030.connection_object.Asset\022)\n\006domain"
    "\030\007 \001(\0132\031.connection_object.Domain\022\025\n\rrec"
    "eivePubkey\030\010 \001(\t\"\201\001\n\016ConsensusEvent\022:\n\017e"
    "ventSignatures\030\001 \003(\0132!.connection_object"
    ".EventSignature\0223\n\013transaction\030\002 \001(\0132\036.c"
    "onnection_object.Transaction\"\037\n\016StatusRe"
    "sponse\022\r\n\005value\030\001 \001(\t2f\n\017IrohaConnection"
    "\022S\n\tOperation\022!.connection_object.Consen"
    "susEvent\032!.connection_object.StatusRespo"
    "nse\"\000B\003\200\001\000b\006proto3", 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "connection.proto", &protobuf_RegisterTypes);
  Asset::default_instance_ = new Asset();
  Domain::default_instance_ = new Domain();
  TxSignatures::default_instance_ = new TxSignatures();
  EventSignature::default_instance_ = new EventSignature();
  Transaction::default_instance_ = new Transaction();
  ConsensusEvent::default_instance_ = new ConsensusEvent();
  StatusResponse::default_instance_ = new StatusResponse();
  Asset::default_instance_->InitAsDefaultInstance();
  Domain::default_instance_->InitAsDefaultInstance();
  TxSignatures::default_instance_->InitAsDefaultInstance();
  EventSignature::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  ConsensusEvent::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connection_2eproto {
  StaticDescriptorInitializer_connection_2eproto() {
    protobuf_AddDesc_connection_2eproto();
  }
} static_descriptor_initializer_connection_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Asset::kDomainFieldNumber;
const int Asset::kNameFieldNumber;
const int Asset::kValueFieldNumber;
const int Asset::kPrecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Asset::Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.Asset)
}

void Asset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Asset::Asset(const Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.Asset)
}

void Asset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
  precision_ = GOOGLE_ULONGLONG(0);
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:connection_object.Asset)
  SharedDtor();
}

void Asset::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Asset_descriptor_;
}

const Asset& Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

Asset* Asset::default_instance_ = NULL;

Asset* Asset::New(::google::protobuf::Arena* arena) const {
  Asset* n = new Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.Asset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Asset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Asset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, precision_);
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Asset.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Asset.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint64 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_precision;
        break;
      }

      // optional uint64 precision = 4;
      case 4: {
        if (tag == 32) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &precision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.Asset)
  return false;
#undef DO_
}

void Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.Asset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Asset.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Asset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  // optional uint64 precision = 4;
  if (this->precision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->precision(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.Asset)
}

::google::protobuf::uint8* Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.Asset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Asset.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Asset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value(), target);
  }

  // optional uint64 precision = 4;
  if (this->precision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->precision(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.Asset)
  return target;
}

int Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.Asset)
  int total_size = 0;

  // optional string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  // optional uint64 precision = 4;
  if (this->precision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->precision());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.precision() != 0) {
    set_precision(from.precision());
  }
}

void Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {

  return true;
}

void Asset::Swap(Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Asset::InternalSwap(Asset* other) {
  domain_.Swap(&other->domain_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(precision_, other->precision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Asset_descriptor_;
  metadata.reflection = Asset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Asset

// optional string domain = 1;
void Asset::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Asset::domain() const {
  // @@protoc_insertion_point(field_get:connection_object.Asset.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Asset.domain)
}
 void Asset::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Asset.domain)
}
 void Asset::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Asset.domain)
}
 ::std::string* Asset::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Asset.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Asset::release_domain() {
  // @@protoc_insertion_point(field_release:connection_object.Asset.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Asset.domain)
}

// optional string name = 2;
void Asset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:connection_object.Asset.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Asset.name)
}
 void Asset::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Asset.name)
}
 void Asset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Asset.name)
}
 ::std::string* Asset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Asset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:connection_object.Asset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Asset.name)
}

// optional uint64 value = 3;
void Asset::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Asset::value() const {
  // @@protoc_insertion_point(field_get:connection_object.Asset.value)
  return value_;
}
 void Asset::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:connection_object.Asset.value)
}

// optional uint64 precision = 4;
void Asset::clear_precision() {
  precision_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Asset::precision() const {
  // @@protoc_insertion_point(field_get:connection_object.Asset.precision)
  return precision_;
}
 void Asset::set_precision(::google::protobuf::uint64 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:connection_object.Asset.precision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Domain::kOwnerPublicKeyFieldNumber;
const int Domain::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Domain::Domain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.Domain)
}

void Domain::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Domain::Domain(const Domain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.Domain)
}

void Domain::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownerpublickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:connection_object.Domain)
  SharedDtor();
}

void Domain::SharedDtor() {
  ownerpublickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Domain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Domain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Domain_descriptor_;
}

const Domain& Domain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

Domain* Domain::default_instance_ = NULL;

Domain* Domain::New(::google::protobuf::Arena* arena) const {
  Domain* n = new Domain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.Domain)
  ownerpublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Domain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.Domain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ownerPublicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerpublickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ownerpublickey().data(), this->ownerpublickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Domain.ownerPublicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Domain.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.Domain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.Domain)
  return false;
#undef DO_
}

void Domain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.Domain)
  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerpublickey().data(), this->ownerpublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Domain.ownerPublicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ownerpublickey(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Domain.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.Domain)
}

::google::protobuf::uint8* Domain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.Domain)
  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerpublickey().data(), this->ownerpublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Domain.ownerPublicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ownerpublickey(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Domain.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.Domain)
  return target;
}

int Domain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.Domain)
  int total_size = 0;

  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ownerpublickey());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Domain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.Domain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Domain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Domain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.Domain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.Domain)
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.Domain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ownerpublickey().size() > 0) {

    ownerpublickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownerpublickey_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Domain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {

  return true;
}

void Domain::Swap(Domain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Domain::InternalSwap(Domain* other) {
  ownerpublickey_.Swap(&other->ownerpublickey_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Domain_descriptor_;
  metadata.reflection = Domain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Domain

// optional string ownerPublicKey = 1;
void Domain::clear_ownerpublickey() {
  ownerpublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Domain::ownerpublickey() const {
  // @@protoc_insertion_point(field_get:connection_object.Domain.ownerPublicKey)
  return ownerpublickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_ownerpublickey(const ::std::string& value) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Domain.ownerPublicKey)
}
 void Domain::set_ownerpublickey(const char* value) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Domain.ownerPublicKey)
}
 void Domain::set_ownerpublickey(const char* value, size_t size) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Domain.ownerPublicKey)
}
 ::std::string* Domain::mutable_ownerpublickey() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Domain.ownerPublicKey)
  return ownerpublickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Domain::release_ownerpublickey() {
  // @@protoc_insertion_point(field_release:connection_object.Domain.ownerPublicKey)
  
  return ownerpublickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_allocated_ownerpublickey(::std::string* ownerpublickey) {
  if (ownerpublickey != NULL) {
    
  } else {
    
  }
  ownerpublickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ownerpublickey);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Domain.ownerPublicKey)
}

// optional string name = 2;
void Domain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Domain::name() const {
  // @@protoc_insertion_point(field_get:connection_object.Domain.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Domain.name)
}
 void Domain::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Domain.name)
}
 void Domain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Domain.name)
}
 ::std::string* Domain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Domain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Domain::release_name() {
  // @@protoc_insertion_point(field_release:connection_object.Domain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Domain.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxSignatures::kPublicKeyFieldNumber;
const int TxSignatures::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxSignatures::TxSignatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.TxSignatures)
}

void TxSignatures::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TxSignatures::TxSignatures(const TxSignatures& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.TxSignatures)
}

void TxSignatures::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxSignatures::~TxSignatures() {
  // @@protoc_insertion_point(destructor:connection_object.TxSignatures)
  SharedDtor();
}

void TxSignatures::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TxSignatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSignatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxSignatures_descriptor_;
}

const TxSignatures& TxSignatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

TxSignatures* TxSignatures::default_instance_ = NULL;

TxSignatures* TxSignatures::New(::google::protobuf::Arena* arena) const {
  TxSignatures* n = new TxSignatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxSignatures::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.TxSignatures)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TxSignatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.TxSignatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.TxSignatures.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.TxSignatures.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.TxSignatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.TxSignatures)
  return false;
#undef DO_
}

void TxSignatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.TxSignatures)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.TxSignatures.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.TxSignatures.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.TxSignatures)
}

::google::protobuf::uint8* TxSignatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.TxSignatures)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.TxSignatures.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.TxSignatures.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.TxSignatures)
  return target;
}

int TxSignatures::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.TxSignatures)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSignatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.TxSignatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TxSignatures* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxSignatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.TxSignatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.TxSignatures)
    MergeFrom(*source);
  }
}

void TxSignatures::MergeFrom(const TxSignatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.TxSignatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void TxSignatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.TxSignatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSignatures::CopyFrom(const TxSignatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.TxSignatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSignatures::IsInitialized() const {

  return true;
}

void TxSignatures::Swap(TxSignatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxSignatures::InternalSwap(TxSignatures* other) {
  publickey_.Swap(&other->publickey_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxSignatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxSignatures_descriptor_;
  metadata.reflection = TxSignatures_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxSignatures

// optional string publicKey = 1;
void TxSignatures::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TxSignatures::publickey() const {
  // @@protoc_insertion_point(field_get:connection_object.TxSignatures.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.TxSignatures.publicKey)
}
 void TxSignatures::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.TxSignatures.publicKey)
}
 void TxSignatures::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.TxSignatures.publicKey)
}
 ::std::string* TxSignatures::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.TxSignatures.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxSignatures::release_publickey() {
  // @@protoc_insertion_point(field_release:connection_object.TxSignatures.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:connection_object.TxSignatures.publicKey)
}

// optional string signature = 2;
void TxSignatures::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TxSignatures::signature() const {
  // @@protoc_insertion_point(field_get:connection_object.TxSignatures.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.TxSignatures.signature)
}
 void TxSignatures::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.TxSignatures.signature)
}
 void TxSignatures::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.TxSignatures.signature)
}
 ::std::string* TxSignatures::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.TxSignatures.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxSignatures::release_signature() {
  // @@protoc_insertion_point(field_release:connection_object.TxSignatures.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:connection_object.TxSignatures.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSignature::kPublicKeyFieldNumber;
const int EventSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSignature::EventSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.EventSignature)
}

void EventSignature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EventSignature::EventSignature(const EventSignature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.EventSignature)
}

void EventSignature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EventSignature::~EventSignature() {
  // @@protoc_insertion_point(destructor:connection_object.EventSignature)
  SharedDtor();
}

void EventSignature::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EventSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSignature_descriptor_;
}

const EventSignature& EventSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

EventSignature* EventSignature::default_instance_ = NULL;

EventSignature* EventSignature::New(::google::protobuf::Arena* arena) const {
  EventSignature* n = new EventSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.EventSignature)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EventSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.EventSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.EventSignature.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.EventSignature.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.EventSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.EventSignature)
  return false;
#undef DO_
}

void EventSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.EventSignature)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.EventSignature.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.EventSignature.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.EventSignature)
}

::google::protobuf::uint8* EventSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.EventSignature)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.EventSignature.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.EventSignature.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.EventSignature)
  return target;
}

int EventSignature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.EventSignature)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.EventSignature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventSignature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.EventSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.EventSignature)
    MergeFrom(*source);
  }
}

void EventSignature::MergeFrom(const EventSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.EventSignature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void EventSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.EventSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSignature::CopyFrom(const EventSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.EventSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSignature::IsInitialized() const {

  return true;
}

void EventSignature::Swap(EventSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSignature::InternalSwap(EventSignature* other) {
  publickey_.Swap(&other->publickey_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSignature_descriptor_;
  metadata.reflection = EventSignature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventSignature

// optional string publicKey = 1;
void EventSignature::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventSignature::publickey() const {
  // @@protoc_insertion_point(field_get:connection_object.EventSignature.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.EventSignature.publicKey)
}
 void EventSignature::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.EventSignature.publicKey)
}
 void EventSignature::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.EventSignature.publicKey)
}
 ::std::string* EventSignature::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.EventSignature.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventSignature::release_publickey() {
  // @@protoc_insertion_point(field_release:connection_object.EventSignature.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:connection_object.EventSignature.publicKey)
}

// optional string signature = 2;
void EventSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventSignature::signature() const {
  // @@protoc_insertion_point(field_get:connection_object.EventSignature.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.EventSignature.signature)
}
 void EventSignature::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.EventSignature.signature)
}
 void EventSignature::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.EventSignature.signature)
}
 ::std::string* EventSignature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.EventSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventSignature::release_signature() {
  // @@protoc_insertion_point(field_release:connection_object.EventSignature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:connection_object.EventSignature.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kTxSignaturesFieldNumber;
const int Transaction::kTypeFieldNumber;
const int Transaction::kSenderPubkeyFieldNumber;
const int Transaction::kHashFieldNumber;
const int Transaction::kAssetFieldNumber;
const int Transaction::kDomainFieldNumber;
const int Transaction::kReceivePubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  asset_ = const_cast< ::connection_object::Asset*>(&::connection_object::Asset::default_instance());
  domain_ = const_cast< ::connection_object::Domain*>(&::connection_object::Domain::default_instance());
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.Transaction)
}

void Transaction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_ = NULL;
  domain_ = NULL;
  receivepubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:connection_object.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivepubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete asset_;
    delete domain_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.Transaction)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
  receivepubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txsignatures_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .connection_object.TxSignatures txSignatures = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_txSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_txsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_txSignatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Transaction.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_senderPubkey;
        break;
      }

      // optional string senderPubkey = 4;
      case 4: {
        if (tag == 34) {
         parse_senderPubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderpubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senderpubkey().data(), this->senderpubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Transaction.senderPubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hash;
        break;
      }

      // optional string hash = 5;
      case 5: {
        if (tag == 42) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Transaction.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_asset;
        break;
      }

      // optional .connection_object.Asset asset = 6;
      case 6: {
        if (tag == 50) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_domain;
        break;
      }

      // optional .connection_object.Domain domain = 7;
      case 7: {
        if (tag == 58) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_receivePubkey;
        break;
      }

      // optional string receivePubkey = 8;
      case 8: {
        if (tag == 66) {
         parse_receivePubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivepubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receivepubkey().data(), this->receivepubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.Transaction.receivePubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.Transaction)
  // repeated .connection_object.TxSignatures txSignatures = 1;
  for (unsigned int i = 0, n = this->txsignatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txsignatures(i), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string senderPubkey = 4;
  if (this->senderpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpubkey().data(), this->senderpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.senderPubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->senderpubkey(), output);
  }

  // optional string hash = 5;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hash(), output);
  }

  // optional .connection_object.Asset asset = 6;
  if (this->has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->asset_, output);
  }

  // optional .connection_object.Domain domain = 7;
  if (this->has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->domain_, output);
  }

  // optional string receivePubkey = 8;
  if (this->receivepubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receivepubkey().data(), this->receivepubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.receivePubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->receivepubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.Transaction)
  // repeated .connection_object.TxSignatures txSignatures = 1;
  for (unsigned int i = 0, n = this->txsignatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->txsignatures(i), false, target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string senderPubkey = 4;
  if (this->senderpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpubkey().data(), this->senderpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.senderPubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->senderpubkey(), target);
  }

  // optional string hash = 5;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hash(), target);
  }

  // optional .connection_object.Asset asset = 6;
  if (this->has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->asset_, false, target);
  }

  // optional .connection_object.Domain domain = 7;
  if (this->has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->domain_, false, target);
  }

  // optional string receivePubkey = 8;
  if (this->receivepubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receivepubkey().data(), this->receivepubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.Transaction.receivePubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->receivepubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.Transaction)
  return target;
}

int Transaction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.Transaction)
  int total_size = 0;

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string senderPubkey = 4;
  if (this->senderpubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderpubkey());
  }

  // optional string hash = 5;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional .connection_object.Asset asset = 6;
  if (this->has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }

  // optional .connection_object.Domain domain = 7;
  if (this->has_domain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->domain_);
  }

  // optional string receivePubkey = 8;
  if (this->receivepubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receivepubkey());
  }

  // repeated .connection_object.TxSignatures txSignatures = 1;
  total_size += 1 * this->txsignatures_size();
  for (int i = 0; i < this->txsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txsignatures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  txsignatures_.MergeFrom(from.txsignatures_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.senderpubkey().size() > 0) {

    senderpubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderpubkey_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_asset()) {
    mutable_asset()->::connection_object::Asset::MergeFrom(from.asset());
  }
  if (from.has_domain()) {
    mutable_domain()->::connection_object::Domain::MergeFrom(from.domain());
  }
  if (from.receivepubkey().size() > 0) {

    receivepubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivepubkey_);
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  txsignatures_.UnsafeArenaSwap(&other->txsignatures_);
  type_.Swap(&other->type_);
  senderpubkey_.Swap(&other->senderpubkey_);
  hash_.Swap(&other->hash_);
  std::swap(asset_, other->asset_);
  std::swap(domain_, other->domain_);
  receivepubkey_.Swap(&other->receivepubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// repeated .connection_object.TxSignatures txSignatures = 1;
int Transaction::txsignatures_size() const {
  return txsignatures_.size();
}
void Transaction::clear_txsignatures() {
  txsignatures_.Clear();
}
const ::connection_object::TxSignatures& Transaction::txsignatures(int index) const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.txSignatures)
  return txsignatures_.Get(index);
}
::connection_object::TxSignatures* Transaction::mutable_txsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.txSignatures)
  return txsignatures_.Mutable(index);
}
::connection_object::TxSignatures* Transaction::add_txsignatures() {
  // @@protoc_insertion_point(field_add:connection_object.Transaction.txSignatures)
  return txsignatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::connection_object::TxSignatures >*
Transaction::mutable_txsignatures() {
  // @@protoc_insertion_point(field_mutable_list:connection_object.Transaction.txSignatures)
  return &txsignatures_;
}
const ::google::protobuf::RepeatedPtrField< ::connection_object::TxSignatures >&
Transaction::txsignatures() const {
  // @@protoc_insertion_point(field_list:connection_object.Transaction.txSignatures)
  return txsignatures_;
}

// optional string type = 2;
void Transaction::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::type() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Transaction.type)
}
 void Transaction::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Transaction.type)
}
 void Transaction::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Transaction.type)
}
 ::std::string* Transaction::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_type() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.type)
}

// optional string senderPubkey = 4;
void Transaction::clear_senderpubkey() {
  senderpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::senderpubkey() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.senderPubkey)
  return senderpubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_senderpubkey(const ::std::string& value) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Transaction.senderPubkey)
}
 void Transaction::set_senderpubkey(const char* value) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Transaction.senderPubkey)
}
 void Transaction::set_senderpubkey(const char* value, size_t size) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Transaction.senderPubkey)
}
 ::std::string* Transaction::mutable_senderpubkey() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.senderPubkey)
  return senderpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_senderpubkey() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.senderPubkey)
  
  return senderpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_senderpubkey(::std::string* senderpubkey) {
  if (senderpubkey != NULL) {
    
  } else {
    
  }
  senderpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderpubkey);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.senderPubkey)
}

// optional string hash = 5;
void Transaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Transaction.hash)
}
 void Transaction::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Transaction.hash)
}
 void Transaction::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Transaction.hash)
}
 ::std::string* Transaction::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.hash)
}

// optional .connection_object.Asset asset = 6;
bool Transaction::has_asset() const {
  return !_is_default_instance_ && asset_ != NULL;
}
void Transaction::clear_asset() {
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
}
const ::connection_object::Asset& Transaction::asset() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.asset)
  return asset_ != NULL ? *asset_ : *default_instance_->asset_;
}
::connection_object::Asset* Transaction::mutable_asset() {
  
  if (asset_ == NULL) {
    asset_ = new ::connection_object::Asset;
  }
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.asset)
  return asset_;
}
::connection_object::Asset* Transaction::release_asset() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.asset)
  
  ::connection_object::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void Transaction::set_allocated_asset(::connection_object::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.asset)
}

// optional .connection_object.Domain domain = 7;
bool Transaction::has_domain() const {
  return !_is_default_instance_ && domain_ != NULL;
}
void Transaction::clear_domain() {
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
}
const ::connection_object::Domain& Transaction::domain() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
::connection_object::Domain* Transaction::mutable_domain() {
  
  if (domain_ == NULL) {
    domain_ = new ::connection_object::Domain;
  }
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.domain)
  return domain_;
}
::connection_object::Domain* Transaction::release_domain() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.domain)
  
  ::connection_object::Domain* temp = domain_;
  domain_ = NULL;
  return temp;
}
void Transaction::set_allocated_domain(::connection_object::Domain* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.domain)
}

// optional string receivePubkey = 8;
void Transaction::clear_receivepubkey() {
  receivepubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::receivepubkey() const {
  // @@protoc_insertion_point(field_get:connection_object.Transaction.receivePubkey)
  return receivepubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_receivepubkey(const ::std::string& value) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.Transaction.receivePubkey)
}
 void Transaction::set_receivepubkey(const char* value) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.Transaction.receivePubkey)
}
 void Transaction::set_receivepubkey(const char* value, size_t size) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.Transaction.receivePubkey)
}
 ::std::string* Transaction::mutable_receivepubkey() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.Transaction.receivePubkey)
  return receivepubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_receivepubkey() {
  // @@protoc_insertion_point(field_release:connection_object.Transaction.receivePubkey)
  
  return receivepubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_receivepubkey(::std::string* receivepubkey) {
  if (receivepubkey != NULL) {
    
  } else {
    
  }
  receivepubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receivepubkey);
  // @@protoc_insertion_point(field_set_allocated:connection_object.Transaction.receivePubkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusEvent::kEventSignaturesFieldNumber;
const int ConsensusEvent::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusEvent::ConsensusEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.ConsensusEvent)
}

void ConsensusEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transaction_ = const_cast< ::connection_object::Transaction*>(&::connection_object::Transaction::default_instance());
}

ConsensusEvent::ConsensusEvent(const ConsensusEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.ConsensusEvent)
}

void ConsensusEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  transaction_ = NULL;
}

ConsensusEvent::~ConsensusEvent() {
  // @@protoc_insertion_point(destructor:connection_object.ConsensusEvent)
  SharedDtor();
}

void ConsensusEvent::SharedDtor() {
  if (this != default_instance_) {
    delete transaction_;
  }
}

void ConsensusEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusEvent_descriptor_;
}

const ConsensusEvent& ConsensusEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

ConsensusEvent* ConsensusEvent::default_instance_ = NULL;

ConsensusEvent* ConsensusEvent::New(::google::protobuf::Arena* arena) const {
  ConsensusEvent* n = new ConsensusEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.ConsensusEvent)
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
  eventsignatures_.Clear();
}

bool ConsensusEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.ConsensusEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .connection_object.EventSignature eventSignatures = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_eventSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_eventsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_eventSignatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_transaction;
        break;
      }

      // optional .connection_object.Transaction transaction = 2;
      case 2: {
        if (tag == 18) {
         parse_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.ConsensusEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.ConsensusEvent)
  return false;
#undef DO_
}

void ConsensusEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.ConsensusEvent)
  // repeated .connection_object.EventSignature eventSignatures = 1;
  for (unsigned int i = 0, n = this->eventsignatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventsignatures(i), output);
  }

  // optional .connection_object.Transaction transaction = 2;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transaction_, output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.ConsensusEvent)
}

::google::protobuf::uint8* ConsensusEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.ConsensusEvent)
  // repeated .connection_object.EventSignature eventSignatures = 1;
  for (unsigned int i = 0, n = this->eventsignatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->eventsignatures(i), false, target);
  }

  // optional .connection_object.Transaction transaction = 2;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->transaction_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.ConsensusEvent)
  return target;
}

int ConsensusEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.ConsensusEvent)
  int total_size = 0;

  // optional .connection_object.Transaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_);
  }

  // repeated .connection_object.EventSignature eventSignatures = 1;
  total_size += 1 * this->eventsignatures_size();
  for (int i = 0; i < this->eventsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventsignatures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.ConsensusEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConsensusEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.ConsensusEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.ConsensusEvent)
    MergeFrom(*source);
  }
}

void ConsensusEvent::MergeFrom(const ConsensusEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.ConsensusEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  eventsignatures_.MergeFrom(from.eventsignatures_);
  if (from.has_transaction()) {
    mutable_transaction()->::connection_object::Transaction::MergeFrom(from.transaction());
  }
}

void ConsensusEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.ConsensusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusEvent::CopyFrom(const ConsensusEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.ConsensusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusEvent::IsInitialized() const {

  return true;
}

void ConsensusEvent::Swap(ConsensusEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusEvent::InternalSwap(ConsensusEvent* other) {
  eventsignatures_.UnsafeArenaSwap(&other->eventsignatures_);
  std::swap(transaction_, other->transaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusEvent_descriptor_;
  metadata.reflection = ConsensusEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusEvent

// repeated .connection_object.EventSignature eventSignatures = 1;
int ConsensusEvent::eventsignatures_size() const {
  return eventsignatures_.size();
}
void ConsensusEvent::clear_eventsignatures() {
  eventsignatures_.Clear();
}
const ::connection_object::EventSignature& ConsensusEvent::eventsignatures(int index) const {
  // @@protoc_insertion_point(field_get:connection_object.ConsensusEvent.eventSignatures)
  return eventsignatures_.Get(index);
}
::connection_object::EventSignature* ConsensusEvent::mutable_eventsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:connection_object.ConsensusEvent.eventSignatures)
  return eventsignatures_.Mutable(index);
}
::connection_object::EventSignature* ConsensusEvent::add_eventsignatures() {
  // @@protoc_insertion_point(field_add:connection_object.ConsensusEvent.eventSignatures)
  return eventsignatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::connection_object::EventSignature >*
ConsensusEvent::mutable_eventsignatures() {
  // @@protoc_insertion_point(field_mutable_list:connection_object.ConsensusEvent.eventSignatures)
  return &eventsignatures_;
}
const ::google::protobuf::RepeatedPtrField< ::connection_object::EventSignature >&
ConsensusEvent::eventsignatures() const {
  // @@protoc_insertion_point(field_list:connection_object.ConsensusEvent.eventSignatures)
  return eventsignatures_;
}

// optional .connection_object.Transaction transaction = 2;
bool ConsensusEvent::has_transaction() const {
  return !_is_default_instance_ && transaction_ != NULL;
}
void ConsensusEvent::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
const ::connection_object::Transaction& ConsensusEvent::transaction() const {
  // @@protoc_insertion_point(field_get:connection_object.ConsensusEvent.transaction)
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
::connection_object::Transaction* ConsensusEvent::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::connection_object::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:connection_object.ConsensusEvent.transaction)
  return transaction_;
}
::connection_object::Transaction* ConsensusEvent::release_transaction() {
  // @@protoc_insertion_point(field_release:connection_object.ConsensusEvent.transaction)
  
  ::connection_object::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void ConsensusEvent::set_allocated_transaction(::connection_object::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:connection_object.ConsensusEvent.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_object.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_object.StatusResponse)
}

void StatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:connection_object.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:connection_object.StatusResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_object.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "connection_object.StatusResponse.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_object.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_object.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_object.StatusResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.StatusResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:connection_object.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_object.StatusResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "connection_object.StatusResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:connection_object.StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:connection_object.StatusResponse)
  int total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:connection_object.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:connection_object.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:connection_object.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:connection_object.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:connection_object.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:connection_object.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// optional string value = 1;
void StatusResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusResponse::value() const {
  // @@protoc_insertion_point(field_get:connection_object.StatusResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_object.StatusResponse.value)
}
 void StatusResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_object.StatusResponse.value)
}
 void StatusResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_object.StatusResponse.value)
}
 ::std::string* StatusResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:connection_object.StatusResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusResponse::release_value() {
  // @@protoc_insertion_point(field_release:connection_object.StatusResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:connection_object.StatusResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace connection_object

// @@protoc_insertion_point(global_scope)
