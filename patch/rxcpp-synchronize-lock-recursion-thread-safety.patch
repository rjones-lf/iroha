diff --git a/Rx/v2/src/rxcpp/rx-scheduler.hpp b/Rx/v2/src/rxcpp/rx-scheduler.hpp
index fc68979..b6fd831 100644
--- a/Rx/v2/src/rxcpp/rx-scheduler.hpp
+++ b/Rx/v2/src/rxcpp/rx-scheduler.hpp
@@ -62,12 +62,12 @@ public:
 /// the action uses recurse to coordinate the scheduler and the function.
 class recurse
 {
-    bool& isallowed;
+    std::atomic<bool>& isallowed;
     mutable bool isrequested;
     recursed requestor;
     recurse operator=(const recurse&);
 public:
-    explicit recurse(bool& a)
+    explicit recurse(std::atomic<bool>& a)
         : isallowed(a)
         , isrequested(true)
         , requestor(isrequested)
@@ -94,7 +94,7 @@ public:
 /// recursion is used by the scheduler to signal to each action whether tail recursion is allowed.
 class recursion
 {
-    mutable bool isallowed;
+    mutable std::atomic<bool> isallowed;
     recurse recursor;
     recursion operator=(const recursion&);
 public:
diff --git a/Rx/v2/src/rxcpp/subjects/rx-synchronize.hpp b/Rx/v2/src/rxcpp/subjects/rx-synchronize.hpp
index 858eef3..8bce6fa 100644
--- a/Rx/v2/src/rxcpp/subjects/rx-synchronize.hpp
+++ b/Rx/v2/src/rxcpp/subjects/rx-synchronize.hpp
@@ -88,6 +88,7 @@ class synchronize_observer : public detail::multicast_observer<T>
                     return;
                 }

+                guard.unlock();
                 auto processor = coordinator.get_worker();
                 processor.schedule(lifetime, selectedDrain.get());
             }
