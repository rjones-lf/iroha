version: 2
jobs:
  build:
    # must be IROHA_HOME:
    working_directory: /opt/iroha
    docker:
      - image: hyperledger/iroha-docker-develop
        environment:
          IROHA_HOME: /opt/iroha
          IROHA_BUILD: /tmp/build
          IROHA_COVERAGE: /tmp/build/coverage.info
      - image: postgres:9.5
      - image: redis:3.2.8
    steps:
      - checkout
      - run:
          name: install depensices
          command: |
            apt update -y
            apt install lcov -y

      - run:
          name: ensure, required folders created
          command: |
            mkdir -p $IROHA_HOME
            mkdir -p $IROHA_BUILD
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}
            - build-cache
          paths:
            - ~/.ccache
      - run:
          name: ccache setup
          command: |
            ccache --version
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=1G
      - run:
          name: cmake
          command: cmake -DCOVERAGE=ON -H$IROHA_HOME -B$IROHA_BUILD
      - run:
          name: make
          command: cmake --build $IROHA_BUILD -- -j4
      - run:
          name: initialize coverage reporting
          command: lcov --capture --initial --directory $IROHA_BUILD --output-file $IROHA_COVERAGE
      - run:
          name: run tests
          command: cmake --build $IROHA_BUILD --target test
      - run:
          name: reporting coverage
          command : |
            lcov --capture --directory $IROHA_BUILD --output-file $IROHA_COVERAGE
            IROHA_COVERAGE_TARGET_DIRECTORIES=('irohad' 'iroha-cli' 'libs')
            for directory in ${IROHA_COVERAGE_TARGET_DIRECTORIES[@]}; do
              lcov --extract $IROHA_COVERAGE "$IROHA_HOME/$directory/*" > ${IROHA_COVERAGE}_$directory
            done

            BASE_COVERAGE_REPORT=${IROHA_COVERAGE_TARGET_DIRECTORIES[0]}
            IROHA_COVERAGE_TARGET_DIRECTORIES=(${IROHA_COVERAGE_TARGET_DIRECTORIES[@]:1})
            for directory in ${IROHA_COVERAGE_TARGET_DIRECTORIES[@]}; do
              lcov --add-tracefile ${IROHA_COVERAGE}_$directory --add-tracefile ${IROHA_COVERAGE}_$BASE_COVERAGE_REPORT > $IROHA_COVERAGE
              mv $IROHA_COVERAGE ${IROHA_COVERAGE}_$BASE_COVERAGE_REPORT
            done

            mv ${IROHA_COVERAGE}_$BASE_COVERAGE_REPORT $IROHA_COVERAGE
      - run:
          name: upload codecov
          command: cd $IROHA_HOME && bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN -f $IROHA_COVERAGE -X gcov
      - run:
          name: ccache teardown
          command: |
            ccache --cleanup
            ccache --show-stats
      - save_cache:
          key: build-cache-{{ .Branch }}
          paths:
            - ~/.ccache
      - save_cache:
          key: build-cache
          paths:
            - ~/.ccache
#      - run:
#          name: comment coverage on the pull-request
#          command: $IROHA_HOME/scripts/comment-coverage.sh
#
#      - run:
#          name: analyze source code with cppcheck and sonarqube
#          command: |
#            export TEST_FOLDER=$IROHA_BUILD/test_bin
#
#            cd $IROHA_HOME
#            cppcheck --enable=all --inconclusive --xml --xml-version=2 core/ peer/ smart_contract/ test/ tools/ 2>/tmp/cppcheck.xml || true
#
#            # run valgrind for tests
#            VALGRIND_XML=
#            mkdir -p valgrind_report
#            for test in $(ls $TEST_FOLDER); do
#              xml=valgrind_report/$test.xml
#              bin=$TEST_FOLDER/$test
#              valgrind --xml=yes --xml-file=$xml --trace-children=yes --demangle=yes --leak-check=full $bin || true
#
#              if [ -z "$VALGRIND_XML" ]; then
#                VALGRIND_XML=$xml
#              else
#                VALGRIND_XML=$xml,$VALGRIND_XML
#              fi
#            done
#
#            # sonarqube is at /opt/sonar-scanner in warchantua/iroha-dev
#            /opt/sonar-scanner/bin/sonar-scanner \
#              -Dsonar.sourceEncoding=UTF-8 \
#              -Dsonar.sources=benchmark,core,peer,test,tools \
#              -Dsonar.host.url=https://sonar.innoctf.com \
#              -Dsonar.projectKey=hyperledger:iroha \
#              -Dsonar.projectName="Iroha" \
#              -Dsonar.projectVersion="$CIRCLE_BUILD_NUM" \
#              -Dsonar.login="$SONAR_TOKEN" \
#              -Dsonar.cxx.valgrind.reportPath="$VALGRIND_XML" \
#              -Dsonar.cxx.cppcheck.reportPath=/tmp/cppcheck.xml || true
#
#
#      # integrated into circle 2.0
#      - setup_docker_engine
#
#      ## At this step we have compiled and tested iroha.
#      - run:
#          name: setup docker
#          command: |
#            set -ex
#            curl -L -o /tmp/docker.tgz https://get.docker.com/builds/Linux/x86_64/docker-17.03.0-ce.tgz
#            tar -xz -C /tmp -f /tmp/docker.tgz
#            mv /tmp/docker/* /usr/bin
#
#      - run:
#          name: setup docker-compose
#          command: |
#            set -ex
#            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
#            chmod +x /usr/local/bin/docker-compose
#
#      - run:
#          name: build and push hyperledger/iroha-docker:$CIRCLE_BRANCH image
#          command: |
#            # replace all invalid characters to dots
#            TAG=$(echo $CIRCLE_BRANCH | sed "s/[^a-zA-Z0-9_\-\.]/./g")
#            export TAG=$TAG
#
#            if [ "$TAG" == "master" ]; then
#              TAG="latest"
#            fi
#
#            # directory, where iroha build files will reside
#            export RELEASE=$IROHA_HOME/docker/tiny/iroha
#            mkdir -p $RELEASE/lib
#
#            # extract all libraries which use iroha:
#            LIBS=$(ldd $IROHA_BUILD/bin/iroha-main | cut -f 2 | cut -d " " -f 3)
#
#            # copy libraries (-H = follow links)
#            cp -H $LIBS $RELEASE/lib
#
#            # copy build artifacts
#            rsync -avr ${IROHA_BUILD}/bin ${RELEASE}
#            rsync -avr ${IROHA_HOME}/docker/tiny/scripts ${RELEASE}
#            mkdir -p ${RELEASE}/config
#            cp ${IROHA_HOME}/config/config.json ${RELEASE}/config/config.json
#
#            # build image
#            cd $IROHA_HOME/docker/tiny
#            docker build -t hyperledger/iroha-docker:$TAG .
#
#            # login
#            expect -c '\
#              set timeout 10
#              spawn docker login
#              expect "Username:*"
#              send -- "$env(DOCKER_USER)\r"
#              expect "Password:*"
#              send -- "$env(DOCKER_PASS)\r"
#              expect "*Login Succeeded*"'
#
#            # and push
#            docker push hyperledger/iroha-docker:$TAG
#
#            # clean up
#            rm -rf $RELEASE
#
#      ## At this step we have hyperledger/iroha-docker:$TAG image, we can test it now
#
#      ## you can use it by tag:
#      ##   hyperledger/iroha-docker:$TAG
#      ## don't forget, that call docker run hyperledger/iroha-docker:$TAG is blocking.
#      ## to make in unblocking, run with -d
#      ##
#      ## put your tests here as separate run command, here is the template:
#      #- run:
#      #    name: test name
#      #    command: |
#      #      test body (bash)
#      #      test body (bash)
#      #      don't forget to clean up after tests (if needed)
#
#      - run:
#          name: template test using docker compose
#          command: |
#            docker-compose up -d
#            docker-compose scale iroha=4
#            IP=$(docker inspect --format "{{ .NetworkSettings.Networks.iroha_private.IPAddress }}" $(docker ps -lq))
#            TAG=$(echo $CIRCLE_BRANCH | sed "s/[^a-zA-Z0-9_\-\.]/./g")
#
#            #docker run --rm -it hyperledger/iroha-docker:$TAG sh -c "/iroha/bin/add_peer key $(IP) ledger"
#
#            docker stop $(docker ps -qln 4)
#            docker rm $(docker ps -qln 4)


        
