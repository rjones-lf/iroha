syntax = "proto3";

option cc_generic_services = false;

package Api;

service TransactionRepository {
    rpc find (Query) returns (TransactionResponse) {
    }

    rpc fetch (Query) returns (TransactionResponse) {
    }
    rpc fetchStream (stream Transaction) returns (StatusResponse) {
    }
}

service AssetRepository {
    rpc find (Query) returns (AssetResponse) {
    }
}

service Sumeragi {
    //  =+===+=
    // ==+=T=+==
    //   |   |
    //   |   |   This is gate at the entrance of sumeragi...
    rpc Torii (Transaction) returns (StatusResponse) {
    }

    // sumeragi uses.
    rpc Verify (ConsensusEvent) returns (StatusResponse) {
    }

    // WIP It used by Hijiri. Name is think in progress
    rpc Kagami (Query) returns (StatusResponse) {
    }
}


service Izanami {
    // It used by Izanami. Existing peer send TransactionResponse to Initialize Peer.
    rpc Izanagi (TransactionResponse) returns (StatusResponse) {
    }
}


message TransactionResponse {
    string message = 1;
    uint64 code = 2;

    repeated Transaction transaction = 3;
}

message RecieverConfirmation {
    string hash = 1;
    Signature signature = 2;
}

message AssetResponse {
    string message = 1;
    uint64 code = 2;
    uint64 timestamp = 3;

    Asset asset = 4;
    SimpleAsset simpleAsset = 5;
    Domain domain = 6;
    Account account = 7;
    Peer peer = 8;
}

message StatusResponse {
    string value = 1;
    string message = 2;
    uint64 timestamp = 3;
    RecieverConfirmation confirm = 4;
}


message Query {
    string type = 1;
    map<string, BaseObject> value = 2;
    string senderPubkey = 3;
}

message BaseObject {
    oneof value {
        string valueString = 1;
        int64 valueInt = 2;
        bool valueBoolean = 3;
        double valueDouble = 4;
    }
}

message SimpleAsset {
    string domain = 1;
    string name = 2;
    BaseObject value = 3;
    string smartContractName = 4;
}

message Asset {
    string domain = 1;
    string name = 2;
    map<string, BaseObject> value = 3;
    string smartContractName = 4;
}

message Domain {
    string ownerPublicKey = 1;
    string name = 2;
}

message Account {
    string publicKey = 1;
    string name = 2;
    repeated string assets = 3;
}

message Trust {
    double value = 1;
    bool isOk = 2;
}

message Peer {
    string publicKey = 1;
    string address = 2;
    Trust trust = 3;
}

message Signature {
    string publicKey = 1;
    string signature = 2;
}

message Transaction {
    repeated Signature txSignatures = 1;
    string type = 2;
    string senderPubkey = 3;
    string hash = 4;

    uint64 timestamp = 5;

    Asset asset = 6;
    SimpleAsset simpleAsset = 7;
    Domain domain = 8;
    Account account = 9;
    Peer peer = 10;
    string receivePubkey = 11;
}

message ConsensusEvent {
    repeated Signature eventSignatures = 1;
    Transaction transaction = 2;
    uint64 order = 3;
    string status = 4;
}
