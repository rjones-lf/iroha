/**
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef IROHA_POSTGRES_COMMAND_EXECUTOR_HPP
#define IROHA_POSTGRES_COMMAND_EXECUTOR_HPP

#include "ametsuchi/command_executor.hpp"

#include "ametsuchi/impl/postgres_wsv_common.hpp"

namespace iroha {
  namespace ametsuchi {

    class PostgresCommandExecutor : public CommandExecutor {
     public:
      explicit PostgresCommandExecutor(pqxx::nontransaction &transaction);

      WsvCommandResult addAssetQuantity(
          const shared_model::interface::types::AccountIdType &account_id,
          const shared_model::interface::types::AssetIdType &asset_id,
          const std::string &amount,
          const shared_model::interface::types::PrecisionType precision) override;

     private:
      pqxx::nontransaction &transaction_;

      using ExecuteType = decltype(makeExecuteResult(transaction_));
      ExecuteType execute_;

      /**
       * Transforms result which contains pqxx to WsvCommandResult,
       * which will have error message generated by error_generator
       * appended to error received from given result
       * @param result which can be received by calling execute_
       * @param error_generator function which must generate error message
       * to be used as a return error.
       * Function is passed instead of string to avoid overhead of string
       * construction in successful case.
       * @return WsvCommandResult with combined error message
       * in case of result contains error
       */
      template <typename Function>
      WsvCommandResult makeCommandResult(
          expected::Result<pqxx::result, std::string> &&result,
          Function &&error_generator) const noexcept {
        return result.match(
            [](expected::Value<pqxx::result> v) -> WsvCommandResult {
              return {};
            },
            [&error_generator](
                expected::Error<std::string> e) -> WsvCommandResult {
              return expected::makeError(error_generator() + "\n" + e.error);
            });
      }
    };
  }  // namespace ametsuchi
}  // namespace iroha

#endif //IROHA_POSTGRES_COMMAND_EXECUTOR_HPP
