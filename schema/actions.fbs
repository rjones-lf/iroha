include "asset.fbs";
include "account.fbs";
include "primitives.fbs";

namespace protocol;

//////////////////////////////////////////
/// Commands for Account
table AccountAddAccount {
  signatories: [Signature] (required);
  quorum:      ubyte;
}

table AccountAddSignatories {
  to_account:  [ubyte] (required); // uuid, username@domain, username
  signatories: [Signature] (required);
}

table AccountRemoveSignatories {
  from_account: [ubyte] (required);
  signatories:  [Signature] (required);
}

table AccountSetQuorum {
  to_account:   [ubyte] (required);
  quorum:       ubyte;
}

table AssetCreate {
  asset_id: string (required);
}

table AssetRemove {
  asset_id: string (required);
}

table AssetTransfer {
  sender: string (required);
  receiver: string (required);
  asset: Asset (required);
}

table AssetAdd {
  account: string (required);
  asset: Asset (required);
}

table AssetSubtract {
  account: string (required);
  asset:   Asset (required);
}

table AssetSetPermissions {
  account_id:  string (required);
  asset_id:    string (required);
  permissions: ulong;
}

table DomainCreate {
  domain: string (required);
  root_account: string (required);
}

table DomainRemove {
  domain: string (required);
}

table DomainSetPermissions {
  domain_id: string (required);
  account_id: string (required);
  permissions: ulong; // bitstring
}

table PeerAdd {
  object: Peer (required);
}

table PeerRemove {
  pubkey: string (required);
}

table PeerSetTrust {
  pubkey: string (required);
  trust:  double;
}

table PeerChangeTrust {
  pubkey: string (required);
  delta:  double;
}

table PeerActivate {
  pubkey: string (required);
}

table PeerDeactivate {
  pubkey: string (required);
}

//table AccountMigrate {
//  account:    [ubyte] (required, nested_flatbuffer: "Account");
//  prevPubKey: string;
//}

//table AccountStore {
//  uuid: string (required);
//  data:        [KeyValueObject] (required);
//}
//////////////////////////////////////////

//////////////////////////////////////////
/// Commands for Chaincode
//table ChaincodeAdd {
//  code: [ubyte] (required, nested_flatbuffer: "Chaincode");
//}
//
//table ChaincodeRemove {
//  code_name: string (required);
//  domain_name: string  (required);
//  ledger_name: string  (required);
//}
//
//table ChaincodeExecute {
//  code_name:   string  (required);
//  domain_name: string  (required);
//  ledger_name: string  (required);
//}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Permission

table PermissionAdd {
    // This account will be changed permission. If targetAccount is null, All account will be changed
    targetAccount:   string;
    permission:      AccountPermission;
}
table PermissionRemove {

    // This account will be changed permission. If targetAccount is null, All account will be changed
    targetAccount:   string;
    permission:      AccountPermission;
}
//////////////////////////////////////////


union Action {
  AccountAddAccount,
  AccountAddSignatories,
  AccountRemoveSignatories,
  AccountSetQuorum,

//  AccountMigrate, // ** pending **

  AssetCreate,
  AssetRemove,
  AssetTransfer,
  AssetAdd,
  AssetSubtract,
  AssetSetPermissions,

  DomainCreate,
  DomainRemove,
//  DomainSetPermissionsDomainId,
//  DomainSetPermissionsAccountId,
//  DomainSetPermissionsBitString,

  PeerAdd,
  PeerRemove,
  PeerSetTrust,
  PeerChangeTrust,
  PeerActivate,
  PeerDeactivate
}

// union vector is supported in C++ only.
// And, Transaction contains array of objects Action. So, Action needs to be wrapped by ActionWrapper.
// https://github.com/google/flatbuffers/commit/b0752e179bdbae516125cccacd7aebcfd83033a9
table ActionWrapper {
  action: Action;
}
